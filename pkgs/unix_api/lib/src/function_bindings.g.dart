// ignore_for_file: type=lint, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `package:ffigen`.
@ffi.DefaultAsset('package:unix_api/libc_shim')
library;

import 'dart:ffi' as ffi;
/// AUTO GENERATED FILE, DO NOT EDIT.
/// Regenerate with `dart run tool/build_functions.dart`.
@ffi.Native<ffi.Int Function(ffi.Long )>()
external int libc_shim_valid_mode_t(int arg0,
);

@ffi.Native<ffi.Int Function(ffi.UnsignedLong )>()
external int libc_shim_valid_size_t(int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Int , ffi.Long , ffi.Pointer<ffi.Int> )>()
external int libc_shim_open(ffi.Pointer<ffi.Char> arg0,
int arg1,
int arg2,
ffi.Pointer<ffi.Int> arg3,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Char> , ffi.Int , ffi.Long , ffi.Pointer<ffi.Int> )>()
external int libc_shim_openat(int arg0,
ffi.Pointer<ffi.Char> arg1,
int arg2,
int arg3,
ffi.Pointer<ffi.Int> arg4,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external int libc_shim_rename(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Char> arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_mkdtemp(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_getenv(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_strerror(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Long , ffi.Pointer<ffi.Int> )>()
external int libc_shim_chmod(ffi.Pointer<ffi.Char> arg0,
int arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Long , ffi.Pointer<ffi.Int> )>()
external int libc_shim_mkdir(ffi.Pointer<ffi.Char> arg0,
int arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_access(ffi.Pointer<ffi.Char> arg0,
int arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.UnsignedInt Function(ffi.UnsignedInt , ffi.Pointer<ffi.Int> )>()
external int libc_shim_alarm(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external int libc_shim_chdir(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_close(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_crypt(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Char> arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_ctermid(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_dup(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_dup2(int arg0,
int arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Char> , ffi.Int , ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_faccessat(int arg0,
ffi.Pointer<ffi.Char> arg1,
int arg2,
int arg3,
ffi.Pointer<ffi.Int> arg4,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_fchdir(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_fdatasync(int arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> , ffi.UnsignedLong , ffi.Pointer<ffi.Int> )>()
external ffi.Pointer<ffi.Char> libc_shim_getcwd(ffi.Pointer<ffi.Char> arg0,
int arg1,
ffi.Pointer<ffi.Int> arg2,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Int> )>()
external int libc_shim_getpid(ffi.Pointer<ffi.Int> arg0,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Int> )>()
external int libc_shim_getppid(ffi.Pointer<ffi.Int> arg0,
);

@ffi.Native<ffi.Long Function(ffi.Int , ffi.Pointer<ffi.Void> , ffi.UnsignedLong , ffi.Pointer<ffi.Int> )>()
external int libc_shim_read(int arg0,
ffi.Pointer<ffi.Void> arg1,
int arg2,
ffi.Pointer<ffi.Int> arg3,
);

@ffi.Native<ffi.Long Function(ffi.Int , ffi.Pointer<ffi.Void> , ffi.UnsignedLong , ffi.Pointer<ffi.Int> )>()
external int libc_shim_write(int arg0,
ffi.Pointer<ffi.Void> arg1,
int arg2,
ffi.Pointer<ffi.Int> arg3,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char> , ffi.Pointer<ffi.Int> )>()
external int libc_shim_unlink(ffi.Pointer<ffi.Char> arg0,
ffi.Pointer<ffi.Int> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int , ffi.Pointer<ffi.Char> , ffi.Int , ffi.Pointer<ffi.Int> )>()
external int libc_shim_unlinkat(int arg0,
ffi.Pointer<ffi.Char> arg1,
int arg2,
ffi.Pointer<ffi.Int> arg3,
);

